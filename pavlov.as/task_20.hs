-- Задание:
-- Использовать функции высших порядков при решении следующих задач (filter, map, reduce и т.д.):
--
-- * К каждому элементу списка прибавить заданное число.
-- * Каждый элемент списка умножить на заданное число.
-- * по исходному списку сформировать список пар, где вторым элементом списка является заданное число.
-- * Из исходного списка сформировать список списков;
-- * Из исхожного списка сформировать список пар, где первый элемент каждой пары равен соответствующему элементу
--   исходного списка, а второй равен числу вхождений этого элемента в исходный список;
-- * Из исходного списка сформировать список, в котором каждый элемент равен разности между соседними элементами
--   исходного списка;
-- * Из исходного списка сформировать список, в котором каждый элемент равен сумме соседних элементов исходного списка.

listNum = [1,2,3,4,5,6,7,8,9,10]

listAdd :: [Int] -> Int -> [Int]
listAdd list num = map (+num) list

listMult :: [Int] -> Int -> [Int]
listMult list num = map (*num) list

listPair :: [Int] -> Int -> [(Int, Int)]
listPair list num = map (\x -> (x, num)) list

listList :: [Int] -> [[Int]]
listList list = map (\x -> [x]) list

listPairCount :: [Int] -> [(Int, Int)]
listPairCount list = map (\x -> (x, length (filter (==x) list))) list

listDiff :: [Int] -> [Int]
listDiff list = map (\(x, y) -> x - y) (zip list (tail list))

listSum :: [Int] -> [Int]
listSum list = map (\(x, y) -> x + y) (zip list (tail list))